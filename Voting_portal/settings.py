"""
Django settings for Voting_portal project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import pymysql
pymysql.version_info = (1, 4, 13, "final", 0)
pymysql.install_as_MySQLdb()
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

SECRET_KEY = os.environ.get('SECRET_KEY')  

# DEBUG = eval(os.environ.get('DEBUG'))
DEBUG = True

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
        messages.DEBUG: 'alert-secondary',
        messages.INFO: 'alert-info',
        messages.SUCCESS: 'alert-success',   
        messages.WARNING: 'alert-warning',
        messages.ERROR: 'alert-danger',
 }

ALLOWED_HOSTS = ['127.0.0.1', 'dsup.herokuapp.com', '192.168.1.180', '192.168.0.110']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'vote.apps.VoteConfig',
    'votePortal.apps.VoteportalConfig',
    'rest_framework'
    
]
AUTH_USER_MODEL = 'vote.user'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Voting_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Voting_portal.wsgi.application'


# user the environ variable to check if it's on production db or not
# json.loads("true".lower()) // returns true or false of string. 
import json
if json.loads(os.environ.get('PRODUCTION').lower()):
    # production 
    DATABASES = {
    'default': {
            'ENGINE': os.environ.get('DB_ENGINE'),
            'NAME':  os.environ.get('DB_NAME'),
            'USER': os.environ.get('DB_USER'),
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            'HOST': os.environ.get('DB_HOST'),
            'PORT': os.environ.get('DB_PORT')
        }
    }
else:
    # localhost
    DATABASES = {
    'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME':  'DSU',
            'USER': 'root',
            'PASSWORD': 'Z123123z',
            'HOST': 'localhost',
            'PORT': '3306'
        }
    }
    
# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

  
STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles") 

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
EMAIL_BACKEND       = os.environ.get('EMAIL_BACKEND')
EMAIL_HOST          = os.environ.get('EMAIL_HOST')
EMAIL_HOST_USER     = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_PORT          = os.environ.get('EMAIL_PORT')
EMAIL_USE_TLS       = True


# this is the heroku postgresql DB credential. 
# postgres://quktxbqzgdwuqa:04419a13767ca9df93cb3b127e7f674e72c99cd7ccfb8170bc4151de2500555b@ec2-52-73-155-171.compute-1.amazonaws.com:5432/d2rvlcciciqf6h